package ui.main;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.Connection;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;

import com.google.zxing.WriterException;
import dao.OrderDetails_DAO;
import dao.Order_DAO;
import dao.Product_DAO;
import dao.Unit_DAO;
import database.ConnectDB;
import entity.*;
import ui.dialog.Confirm;
import ui.dialog.Message;
import ui.dialog.ProductConfirm;
import ui.forms.TempOrderForm;
import ui.table.TableCustom;

public class ProcessOrder extends javax.swing.JFrame implements ActionListener {
    private Order orderTemp = new Order();
    private ArrayList<OrderDetails> orderDetailsTemp = new ArrayList<>();
    private ArrayList<OrderDetails> listOrderConfirm = new ArrayList<>();
    private ArrayList<OrderDetails> listOrderDetailConver = new ArrayList<>();
    public boolean isUpdating = false;
    NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
    /**
     * Creates new form frmProcessOrder
     */
    public ProcessOrder() {
        initComponents();
        panelProcess1.pnlHoanTien.setVisible(false);
        panelProcess1.pnlDoiSanPham.setVisible(false);
        JTableHeader header = tblCTHD.getTableHeader();
        header.setBackground(Color.WHITE); 
        header.setDefaultRenderer(new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected, boolean hasFocus, int row, int column) {
            Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            comp.setBackground(Color.WHITE);
            return comp;
        }
        });
        cpCTHD.getViewport().setBackground(Color.WHITE); 
        cpCTHD.setBackground(Color.WHITE);
        tblCTHD.setSelectionBackground(new Color(102, 204, 255));
        tblCTHD.setRowHeight(30);
        TableCustom.apply(cpSanPhamTra, TableCustom.TableType.DEFAULT);
        cpSanPhamTra.getViewport().setBackground(Color.WHITE); 
        cpSanPhamTra.setBackground(Color.WHITE); 
        TableCustom.apply(panelProcess1.cpThemSP, TableCustom.TableType.DEFAULT);
        panelProcess1.cpThemSP.getViewport().setBackground(Color.WHITE); 
        panelProcess1.cpThemSP.setBackground(Color.WHITE); 
        
        cboLoaiXuLy.setBackground(Color.WHITE);

        btnSearch.addActionListener(this);
    }
     public JPanel getPnlProcessPanel(){
         return pnlProcessOrder;
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shadowRenderer1 = new ui.swing.shadow.ShadowRenderer();
        lbLogo = new javax.swing.JLabel();
        menu = new ui.menu.Menu();
        pNorth = new javax.swing.JPanel();
        lbHeaderDate = new javax.swing.JLabel();
        btnGuide = new ui.button.Button();
        btnNotification = new ui.button.Button();
        btnAvatar = new ui.button.Button();
        pnlProcessOrder = new ui.panel.PanelRound();
        panelRound4 = new ui.panel.PanelRound();
        jLabel1 = new javax.swing.JLabel();
        panelRound2 = new ui.panel.PanelRound();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new ui.textfield.TextField_Behind();
        btnSearch = new ui.button.Button();
        panelRound5 = new ui.panel.PanelRound();
        jLabel14 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbltxtMaHoaDon = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lbltxtKhachHang = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lbltxtNhanVien = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lbltxtThoiGianTao = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lbltxtTongTienTT = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cpCTHD = new javax.swing.JScrollPane();
        tblCTHD = new javax.swing.JTable();
        panelRound3 = new ui.panel.PanelRound();
        panelRound7 = new ui.panel.PanelRound();
        jLabel16 = new javax.swing.JLabel();
        cboLoaiXuLy = new ui.combo_suggestion.ComboBoxSuggestion<>();
        jLabel15 = new javax.swing.JLabel();
        cpSanPhamTra = new javax.swing.JScrollPane();
        tblSanPhamTra = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        panelProcess1 = new ui.custom.PanelProcess();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(242, 249, 242));

        lbLogo.setIcon(new javax.swing.ImageIcon("src/main/java/ui/menu/logoleft.png")); // NOI18N
        lbLogo.setPreferredSize(new java.awt.Dimension(329, 200));

        pNorth.setBackground(new java.awt.Color(102, 204, 255));
        pNorth.setPreferredSize(new java.awt.Dimension(756, 75));

        lbHeaderDate.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        lbHeaderDate.setForeground(new java.awt.Color(255, 255, 255));

        btnGuide.setBackground(new java.awt.Color(102, 204, 255));
        btnGuide.setIcon(new javax.swing.ImageIcon("src/main/java/ui/button/information_32.png")); // NOI18N
        btnGuide.setToolTipText("");
        btnGuide.setRound(50);
        btnGuide.setShadowColor(new java.awt.Color(102, 204, 255));

        btnNotification.setBackground(new java.awt.Color(102, 204, 255));
        btnNotification.setIcon(new javax.swing.ImageIcon("src/main/java/ui/button/notification_32.png")); // NOI18N
        btnNotification.setRound(50);
        btnNotification.setShadowColor(new java.awt.Color(102, 204, 255));

        btnAvatar.setBackground(new java.awt.Color(102, 204, 255));
        btnAvatar.setIcon(new javax.swing.ImageIcon("src/main/java/ui/button/user_32_white.png")); // NOI18N
        btnAvatar.setRound(50);
        btnAvatar.setShadowColor(new java.awt.Color(102, 204, 255));

        javax.swing.GroupLayout pNorthLayout = new javax.swing.GroupLayout(pNorth);
        pNorth.setLayout(pNorthLayout);
        pNorthLayout.setHorizontalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lbHeaderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnNotification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        pNorthLayout.setVerticalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNotification, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAvatar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pNorthLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lbHeaderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlProcessOrder.setBackground(new java.awt.Color(242, 249, 255));
        pnlProcessOrder.setForeground(new java.awt.Color(242, 249, 255));
        pnlProcessOrder.setShadowColor(new java.awt.Color(242, 249, 255));

        panelRound4.setBackground(new java.awt.Color(255, 255, 255));
        panelRound4.setRoundBottomLeft(10);
        panelRound4.setRoundBottomRight(10);
        panelRound4.setRoundTopLeft(10);
        panelRound4.setRoundTopRight(10);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Xử lý hóa đơn:");

        panelRound2.setBackground(new java.awt.Color(255, 255, 255));
        panelRound2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        panelRound2.setRoundBottomLeft(10);
        panelRound2.setRoundBottomRight(10);
        panelRound2.setRoundTopLeft(10);
        panelRound2.setRoundTopRight(10);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Nhập mã hóa đơn xử lý:");

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnSearch.setIcon(new javax.swing.ImageIcon("src/main/java/ui/button/magnifying-glass_32.png")); // NOI18N
        btnSearch.setMargin(new Insets(2, 10, 3, 10));
        btnSearch.setRound(40);
        btnSearch.setBackground(new java.awt.Color(102, 204, 255));
        btnSearch.setShadowColor(new java.awt.Color(102, 204, 255));
        javax.swing.GroupLayout panelRound2Layout = new javax.swing.GroupLayout(panelRound2);
        panelRound2.setLayout(panelRound2Layout);
        panelRound2Layout.setHorizontalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelRound2Layout.setVerticalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelRound5.setBackground(new java.awt.Color(255, 255, 255));
        panelRound5.setRoundBottomLeft(10);
        panelRound5.setRoundBottomRight(10);
        panelRound5.setRoundTopLeft(10);
        panelRound5.setRoundTopRight(10);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel14.setText("Thông tin hóa đơn đã tạo:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel5.setText("Mã hóa đơn:");

        lbltxtMaHoaDon.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        lbltxtMaHoaDon.setText("---");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel7.setText("Khách hàng:");

        lbltxtKhachHang.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        lbltxtKhachHang.setText("--- / -----------");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel8.setText("Nhân viên tạo:");

        lbltxtNhanVien.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        lbltxtNhanVien.setText("-- / ------------");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel10.setText("Thời gian tạo:");

        lbltxtThoiGianTao.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        lbltxtThoiGianTao.setText("--/--/----  --:--");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel12.setText("Tổng tiền đã thanh toán:");

        lbltxtTongTienTT.setFont(new java.awt.Font("Segoe UI", 2, 30)); // NOI18N
        lbltxtTongTienTT.setForeground(new java.awt.Color(255, 0, 0));
        lbltxtTongTienTT.setText("----");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("Chi tiết hóa đơn:");

        tblCTHD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblCTHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "STT", "Mã SP", "Tên SP", "Đơn vị", "SL", "Giá bán", "Thành tiền", "Đủ điều kiện", "Xác nhận"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cpCTHD.setViewportView(tblCTHD);
        TableColumnModel columnModel = tblCTHD.getColumnModel();
        columnModel.setColumnSelectionAllowed(false); // Ngăn chọn cột
//        columnModel.setReorderingAllowed(false);

        if (tblCTHD.getColumnModel().getColumnCount() > 0) {
            tblCTHD.getColumnModel().getColumn(0).setPreferredWidth(30);
            tblCTHD.getColumnModel().getColumn(4).setPreferredWidth(30);
            tblCTHD.getColumnModel().getColumn(8).setPreferredWidth(80);
        }

        javax.swing.GroupLayout panelRound5Layout = new javax.swing.GroupLayout(panelRound5);
        panelRound5.setLayout(panelRound5Layout);
        panelRound5Layout.setHorizontalGroup(
            panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cpCTHD)
                    .addGroup(panelRound5Layout.createSequentialGroup()
                        .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRound5Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(87, 87, 87)
                                .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbltxtThoiGianTao, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbltxtKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbltxtMaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbltxtNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbltxtTongTienTT, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelRound5Layout.setVerticalGroup(
            panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addGap(12, 12, 12)
                .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lbltxtMaHoaDon))
                .addGap(28, 28, 28)
                .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lbltxtKhachHang))
                .addGap(28, 28, 28)
                .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbltxtNhanVien)
                    .addComponent(jLabel8))
                .addGap(28, 28, 28)
                .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbltxtThoiGianTao)
                    .addComponent(jLabel10))
                .addGap(28, 28, 28)
                .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbltxtTongTienTT)
                    .addComponent(jLabel12))
                .addGap(12, 12, 12)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpCTHD, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
        );

        javax.swing.GroupLayout panelRound4Layout = new javax.swing.GroupLayout(panelRound4);
        panelRound4.setLayout(panelRound4Layout);
        panelRound4Layout.setHorizontalGroup(
            panelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRound2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelRound4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRound4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelRound5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelRound4Layout.setVerticalGroup(
            panelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelRound2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelRound5, javax.swing.GroupLayout.PREFERRED_SIZE, 795, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(137, 137, 137))
        );

        panelRound3.setBackground(new java.awt.Color(255, 255, 255));
        panelRound3.setRoundBottomLeft(10);
        panelRound3.setRoundBottomRight(10);
        panelRound3.setRoundTopLeft(10);
        panelRound3.setRoundTopRight(10);

        panelRound7.setBackground(new java.awt.Color(255, 255, 255));
        panelRound7.setRoundBottomLeft(10);
        panelRound7.setRoundBottomRight(10);
        panelRound7.setRoundTopLeft(10);
        panelRound7.setRoundTopRight(10);

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel16.setText("Chọn loại xử lý:");

        cboLoaiXuLy.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cboLoaiXuLy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"Xử lý hoàn tiền", "Xử lý đổi sản phẩm khác" }));
        cboLoaiXuLy.setSelectedIndex(-1);
        cboLoaiXuLy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboLoaiXuLyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRound7Layout = new javax.swing.GroupLayout(panelRound7);
        panelRound7.setLayout(panelRound7Layout);
        panelRound7Layout.setHorizontalGroup(
            panelRound7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound7Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cboLoaiXuLy, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(235, Short.MAX_VALUE))
        );
        panelRound7Layout.setVerticalGroup(
            panelRound7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelRound7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(cboLoaiXuLy, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel15.setText("Sản phẩm đã xác nhận đổi trả:");

        cpSanPhamTra.setBackground(new java.awt.Color(255, 255, 255));

        tblSanPhamTra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "STT", "Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Giá bán"
            }
        ));
        cpSanPhamTra.setViewportView(tblSanPhamTra);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelProcess1, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addComponent(panelProcess1, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout panelRound3Layout = new javax.swing.GroupLayout(panelRound3);
        panelRound3.setLayout(panelRound3Layout);
        panelRound3Layout.setHorizontalGroup(
            panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(panelRound7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cpSanPhamTra, javax.swing.GroupLayout.Alignment.LEADING))))
        );
        panelRound3Layout.setVerticalGroup(
            panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpSanPhamTra, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelRound7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlProcessOrderLayout = new javax.swing.GroupLayout(pnlProcessOrder);
        pnlProcessOrder.setLayout(pnlProcessOrderLayout);
        pnlProcessOrderLayout.setHorizontalGroup(
            pnlProcessOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProcessOrderLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelRound4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelRound3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlProcessOrderLayout.setVerticalGroup(
            pnlProcessOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProcessOrderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlProcessOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlProcessOrderLayout.createSequentialGroup()
                        .addComponent(panelRound3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 14, Short.MAX_VALUE))
                    .addComponent(panelRound4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 973, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pNorth, javax.swing.GroupLayout.DEFAULT_SIZE, 1614, Short.MAX_VALUE)
                    .addComponent(pnlProcessOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 1614, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pNorth, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(pnlProcessOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(menu, javax.swing.GroupLayout.DEFAULT_SIZE, 874, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelProcess1.btnT.addActionListener(this);
        panelProcess1.btnDThem.addActionListener(this);
        panelProcess1.btnD.addActionListener(this);
        pack();

        //Xử lý sự kiện trên bảng chi tiết hóa đơn
        tblCTHD.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (isUpdating) {
                    return;
                }
                listOrderConfirm = new ArrayList<>();
                for (int i = 0; i < tblCTHD.getModel().getRowCount(); i++) {

                    Boolean checked = (Boolean) tblCTHD.getModel().getValueAt(i, 8);
                    if (checked != null && checked) {
                        OrderDetails odt = searchOrderDetail((String) tblCTHD.getModel().getValueAt(i, 1));
                        listOrderConfirm.add(odt);
                        continue;
                    }
                    System.out.println("Có chạy!");
                    if (checked != null && checked) {
                        if (!((Boolean) tblCTHD.getModel().getValueAt(i, 7))) {
                            Confirm dialog = new Confirm(StaticProcess.homePage, true, "Chú ý", "Lưu ý đây là những sản phẩm không cho đổi trả trừ trường hợp giao nhầm. Bạn vẫn muốn tiếp tục?", "src/main/java/ui/dialog/warning.png", "Tiếp tục", "Hủy bỏ");
                            dialog.showAlert();
                            int response = dialog.getResponse();
                            if (response == 1) {
                                OrderDetails odt = searchOrderDetail((String) tblCTHD.getModel().getValueAt(i, 1));
                                if (odt != null) {
                                    listOrderConfirm.add(odt);
                                }
                            } else {
                                tblCTHD.getModel().setValueAt(false, i, 8);
                            }
                        } else{
                            OrderDetails odt = searchOrderDetail((String) tblCTHD.getModel().getValueAt(i, 1));
                            if (odt != null) {
                                listOrderConfirm.add(odt);
                            }
                        }
                    }
                }
                infoRefund();
                loadTableSPTra(tblSanPhamTra, listOrderConfirm);
            }
        });


        txtSearch.addActionListener(e -> {
            btnSearch.doClick();
        });
        panelProcess1.txtDThem.addActionListener(e -> {
            panelProcess1.btnDThem.doClick();
        });
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void cboLoaiXuLyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiXuLyActionPerformed
        // TODO add your handling code here:
        if(((String)cboLoaiXuLy.getSelectedItem()).equals("Xử lý hoàn tiền")){
            panelProcess1.pnlHoanTien.setVisible(true);
            panelProcess1.pnlDoiSanPham.setVisible(false);
        } else if (((String)cboLoaiXuLy.getSelectedItem()).equals("Xử lý đổi sản phẩm khác")){
            panelProcess1.pnlHoanTien.setVisible(false);
            panelProcess1.pnlDoiSanPham.setVisible(true);
        } else {
            panelProcess1.pnlHoanTien.setVisible(false);
            panelProcess1.pnlDoiSanPham.setVisible(false);
        }
    }//GEN-LAST:event_cboLoaiXuLyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProcessOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProcessOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ui.button.Button btnAvatar;
    private ui.button.Button btnGuide;
    private ui.button.Button btnNotification;
    private ui.button.Button btnSearch;
    private ui.combo_suggestion.ComboBoxSuggestion<String> cboLoaiXuLy;
    private javax.swing.JScrollPane cpCTHD;
    private javax.swing.JScrollPane cpSanPhamTra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbHeaderDate;
    private javax.swing.JLabel lbLogo;
    private javax.swing.JLabel lbltxtKhachHang;
    private javax.swing.JLabel lbltxtMaHoaDon;
    private javax.swing.JLabel lbltxtNhanVien;
    private javax.swing.JLabel lbltxtThoiGianTao;
    private javax.swing.JLabel lbltxtTongTienTT;
    private ui.menu.Menu menu;
    private javax.swing.JPanel pNorth;
    private ui.custom.PanelProcess panelProcess1;
    private ui.panel.PanelRound panelRound2;
    private ui.panel.PanelRound panelRound3;
    private ui.panel.PanelRound panelRound4;
    private ui.panel.PanelRound panelRound5;
    private ui.panel.PanelRound panelRound7;
    private ui.panel.PanelRound pnlProcessOrder;
    private ui.swing.shadow.ShadowRenderer shadowRenderer1;
    private javax.swing.JTable tblCTHD;
    private javax.swing.JTable tblSanPhamTra;
    private ui.textfield.TextField_Behind txtSearch;

    @Override
    public void actionPerformed(ActionEvent e) {
        Object o = e.getSource();
        if(o.equals(btnSearch)){
            if(txtSearch.getText().trim().equals("")){
                new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng nhập mã hóa đơn đổi trả", "src/main/java/ui/dialog/warning.png").showAlert();
            }else{
                orderTemp = Order_DAO.getInstance().getOrder_ByoOrderID(txtSearch.getText());
                if(orderTemp.getCustomer().getCustomerID() == null){
                    new Message(StaticProcess.homePage, true, "Thông báo", "Hóa đơn khách vãng lai, không được đổi trả theo quy định!", "src/main/java/ui/dialog/warning.png").showAlert();
                }
                if(orderTemp == null){
                    new Message(StaticProcess.homePage, true, "Thông báo", "Hóa đơn không tồn tại, vui lòng kiểm tra lại", "src/main/java/ui/dialog/warning.png").showAlert();
                }else{
                    try {
                        BarcodeGenerator.generateBarcode(txtSearch.getText().trim());
                    } catch (com.itextpdf.barcodes.qrcode.WriterException | IOException ex) {
                        throw new RuntimeException(ex);
                    }

                    if(Order_DAO.getInstance().orderIsExists(convertOrderID(orderTemp.getOrderID()))){
                        new Message(StaticProcess.homePage, true, "Thông báo", "Hóa đơn này đã được đổi trả, vui lòng kiểm tra lại", "src/main/java/ui/dialog/warning.png").showAlert();
                    }else{
                        orderDetailsTemp = OrderDetails_DAO.getInstance().getOrderDetailList(orderTemp.getOrderID());
                        fillInfo(orderTemp);
                        loadTableCTHD(tblCTHD, orderDetailsTemp);
                    }
                }
            }
        }
        //Xử lý xác nhận hoàn tiền
        if(o.equals(panelProcess1.btnT) && checkOrder()){
            if(listOrderConfirm.size() != 0){
                if(panelProcess1.chkTXacNhan.isSelected()){
                    Order orderN = new Order(convertOrderID(orderTemp.getOrderID()), LocalDateTime.now(), orderTemp.getShipToAddress(), orderTemp.getPaymentMethod(), orderTemp.getDiscount(), StaticProcess.empLogin, orderTemp.getCustomer(), orderTemp.getPrescription());
                    Order_DAO.getInstance().addOrder(orderN, ConnectDB.getConnectDB_H());
                    double tienHoanT = 0.0;
                    for(OrderDetails odt : listOrderConfirm){
                        tienHoanT += odt.getLineTotal();
                    }
                    for (OrderDetails ord: listOrderConfirm){
                        OrderDetails_DAO.getInstance().addOrderReturnDetails(orderN.getOrderID(),ord.getProduct().getProductID(), ord.getOrderQuantity(),ord.getProduct().getSellPrice(ord.getUnit()) * (-1) * ord.getOrderQuantity(), Unit_DAO.getInstance().getUnitByName(ord.getUnit().name()).getFirst().getUnitID(), ConnectDB.getConnectDB_H());
                    }
                    //số lượng tồn kho sản phẩm trả tăng lên
                    //Sản phẩm trả tăng
                    for(OrderDetails ot: listOrderConfirm){
                        Product_DAO.getInstance().updateProductInStock_WithTransaction(ot.getProduct().getProductID(), ot.getOrderQuantity(), ot.getUnit(), true, ConnectDB.getConnectDB_H());
                    }
                    new Message(StaticProcess.homePage, true, "Thông báo", "Hóa đơn đã được xử lý thành công!", "src/main/java/ui/dialog/done.png").showAlert();
                    reset();
                }else {
                    new Message(StaticProcess.homePage, true, "Chú ý", "Trường hợp hoàn tiền, vui lòng xác nhận đây là hóa đơn với lý do giao nhầm sản phẩm", "src/main/java/ui/dialog/warning.png").showAlert();
                }
            }else {
                new Message(StaticProcess.homePage, true, "Chú ý", "Vui lòng thêm sản phẩm đổi trả", "src/main/java/ui/dialog/warning.png").showAlert();
            }
        }
        //XỬ lý đổi trả sản phẩm
        if(o.equals(panelProcess1.btnDThem)){
            if(checkData()){
                Product prod = Product_DAO.getInstance().getProduct_ByID(convertBarcodeToProductID(panelProcess1.txtDThem.getText()));
                if(prod != null){
                    ProductConfirm pCf = new ProductConfirm(StaticProcess.homePage, prod, true);
                    pCf.showAlert();
                    OrderDetails pSelect = pCf.getOrderDetails(orderTemp, convertOrderID(orderTemp.getOrderID()));
                    if(checkProductLíst(prod.getProductID(), listOrderDetailConver)){
                        listOrderDetailConver.add(pSelect);
                    }else{
                        for(OrderDetails ot: listOrderDetailConver){
                            if(ot.getProduct().getProductID().equals(prod.getProductID())){
                                ot.setOrderQuantity((ot.getOrderQuantity() + 1));
                            }
                        }
                    }
                    panelProcess1.txtDThem.setText("");
                    fillInfoPC();
                }else{
                    new Message(StaticProcess.homePage, true, "Chú ý", "Sản phẩm không tồn tại!", "src/main/java/ui/dialog/warning.png").showAlert();
                }
                loadTableCTHD(panelProcess1.tblThemSP, listOrderDetailConver);
            }
        }
        //Xác nhận đổi trả sản phẩm
        if(o.equals(panelProcess1.btnD) && checkOrder()){
            if(listOrderConfirm.size() != 0){
                if(listOrderDetailConver.size() == 0){
                    new Message(StaticProcess.homePage, true, "Chú ý", "Vui lòng thêm sản phẩm muốn quy đổi", "src/main/java/ui/dialog/warning.png").showAlert();
                    panelProcess1.txtDThem.requestFocus();
                }else{
                    Order orderD = new Order(convertOrderID(orderTemp.getOrderID()), LocalDateTime.now(), orderTemp.getShipToAddress(), orderTemp.getPaymentMethod(), orderTemp.getDiscount(), StaticProcess.empLogin, orderTemp.getCustomer(), orderTemp.getPrescription());
                    Order_DAO.getInstance().addOrder(orderD, ConnectDB.getConnectDB_H());
                    //Thêm chi tiết hóa đơn
                    double tienBanDau = getProductListPrice(listOrderConfirm);
                    double tongDoi = getProductListPrice(listOrderDetailConver);
                    double tienThuThem =  tienBanDau - (tienBanDau * 0.01) - tongDoi;
                    Connection conn = ConnectDB.getConnectDB_H();
                    for (int i = 0; i < listOrderConfirm.size(); i++){
                        OrderDetails ord = listOrderConfirm.get(i);
                        double additionalAmount = (i == listOrderConfirm.size() - 1) ? tienThuThem * (-1) : 0.0;
                        OrderDetails_DAO.getInstance().addOrderReturnDetails(orderD.getOrderID(), ord.getProduct().getProductID(), ord.getOrderQuantity(), additionalAmount, Unit_DAO.getInstance().getUnitByName(ord.getUnit().name()).getFirst().getUnitID(),conn);
                    }
                    //Cập nhật tình trạng tồn kho
                    //Sản phẩm đổi giảm
                    for(OrderDetails ot: listOrderDetailConver){
                        Product_DAO.getInstance().updateProductInStock_WithTransaction(ot.getProduct().getProductID(), ot.getOrderQuantity(), ot.getUnit(), false, ConnectDB.getConnectDB_H());
                    }
                    //Sản phẩm trả tăng
                    for(OrderDetails ot: listOrderConfirm){
                        Product_DAO.getInstance().updateProductInStock_WithTransaction(ot.getProduct().getProductID(), ot.getOrderQuantity(), ot.getUnit(), false, ConnectDB.getConnectDB_H());
                    }
                    reset();
                    new Message(StaticProcess.homePage, true, "Thông báo", "Hóa đơn đã được xử lý thành công!", "src/main/java/ui/dialog/done.png").showAlert();
                    try {
                        TempOrderForm.invoiceOrder(orderD);
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                }
            }else {
                new Message(StaticProcess.homePage, true, "Chú ý", "Vui lòng thêm sản phẩm đổi trả", "src/main/java/ui/dialog/warning.png").showAlert();
            }
        }
    }
    // End of variables declaration//GEN-END:variables

//Kiểm tra điều kiện thêm sản phẩm
    public boolean checkData(){
        if(orderDetailsTemp.isEmpty()){
            new Message(StaticProcess.homePage, true, "Chú ý", "Vui lòng tìm hóa đơn đổi trả", "src/main/java/ui/dialog/warning.png").showAlert();
            panelProcess1.txtDThem.setText("");
            txtSearch.requestFocus();
            return false;
        }
        if(panelProcess1.txtDThem.getText().trim().equals("")){
            new Message(StaticProcess.homePage, true, "Chú ý", "Vui lòng nhập mã sản phẩm quy đổi", "src/main/java/ui/dialog/warning.png").showAlert();
            panelProcess1.txtDThem.requestFocus();
            return false;
        }
        return true;
    }
//Hóa đơn tạm đã tồn tại chưa
    public boolean checkOrder(){
        if(txtSearch.getText().trim().equals("")){
            new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng nhập mã hóa đơn đổi trả", "src/main/java/ui/dialog/warning.png").showAlert();
            txtSearch.requestFocus();
            return false;
        }
        return true;
    }
public void fillInfo(Order o){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
       lbltxtMaHoaDon.setText(o.getOrderID());
       lbltxtKhachHang.setText(o.getCustomer().getCustomerID() + " / " + o.getCustomer().getCustomerName());
       lbltxtNhanVien.setText(o.getEmployee().getEmployeeID() + " / " + o.getEmployee().getEmployeeName());
       lbltxtThoiGianTao.setText(o.getOrderDate().format(formatter));
       lbltxtTongTienTT.setText(currencyFormatter.format(o.getTotalDue()));
}
public void loadTableCTHD(JTable table, ArrayList<OrderDetails> listCTHD){
    isUpdating = true;
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    model.setRowCount(0);
    int count = 1;
    for (OrderDetails o : listCTHD){
        model.addRow(new Object[] {count, o.getProduct().getProductID(), o.getProduct().getProductName(), o.getUnit().name(), o.getOrderQuantity(), o.getLineTotal()/o.getOrderQuantity(), o.getLineTotal(), checkCondition(o), false});
        count++;
    }
    isUpdating = false;
}
    public void loadTableSPTra(JTable table, ArrayList<OrderDetails> listCTHD){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        int count = 1; //"STT", "Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Giá bán", "Thành tiền"
        for (OrderDetails o : listCTHD){
            model.addRow(new Object[] {count, o.getProduct().getProductID(), o.getProduct().getProductName(), o.getOrderQuantity(), o.getLineTotal()});
            count++;
        }
    }

public boolean checkCondition(OrderDetails odt){
        LocalDateTime currentDateTime = LocalDateTime.now();
        LocalDateTime thirtyDaysAgo = currentDateTime.minus(30, ChronoUnit.DAYS);
        if (odt.getProduct().isFunctionalFood() && (!orderTemp.getCustomer().getPhoneNumber().equals("")) && orderTemp.getOrderDate().isAfter(thirtyDaysAgo)){
            return true;
        }
        return false;
}
public OrderDetails searchOrderDetail(String productID){
        for(OrderDetails odt : orderDetailsTemp){
            if(odt.getProduct().getProductID().equals(productID)){
                return odt;
            }
        }
        return null;
}
//Xử lý thông tin hoàn tiền
    public void infoRefund(){
        panelProcess1.lbltxtTS_SPC.setText(listOrderConfirm.size() + "");
        double tienHoan = 0.0;
        for(OrderDetails odt : listOrderConfirm){
            tienHoan += odt.getLineTotal();
        }
        panelProcess1.lbltxtTTongTien.setText(currencyFormatter.format(tienHoan));
        panelProcess1.lbltxtTPhiHoanTien.setText(currencyFormatter.format(tienHoan * 0.01));
        panelProcess1.lbltxtTTongHoanTien.setText(currencyFormatter.format(tienHoan - (tienHoan * 0.01)));
    }
    //=========================================================================================
    //Đối với hoàn tiền nó sẽ tạo ra hóa đơn mới với tổng tiền là số âm, vd mã hóa đơn đổi trả OR101124000001 thì tạo hóa đơn mới với mã là OC101124000001

    //Hàm chuyển đổi mã háo đơn
    public String convertOrderID(String orderID) {
        if (orderID.length() >= 3) {
            StringBuilder modifiedCode = new StringBuilder(orderID);
            modifiedCode.setCharAt(1, 'C');
            return modifiedCode.toString();
        }
        return orderID;
    }
    //Hàm đặt lại khi hóa đơn xử lý thành công
    public void reset(){
        txtSearch.setText("");
        lbltxtMaHoaDon.setText("---");
        lbltxtKhachHang.setText("--- / ---" );
        lbltxtNhanVien.setText("--- / ---");
        lbltxtThoiGianTao.setText("---");
        lbltxtTongTienTT.setText("---");

        orderTemp = new Order();
        orderDetailsTemp = new ArrayList<>();
        listOrderConfirm = new ArrayList<>();
        listOrderDetailConver = new ArrayList<>();
        loadTableCTHD(tblCTHD, orderDetailsTemp);
        loadTableSPTra(tblSanPhamTra, listOrderConfirm);
        loadTableCTHD(panelProcess1.tblThemSP, listOrderDetailConver);

        //Thêm tin bên đổi sản phẩm
        panelProcess1.lblDTienBD.setText("---");
        panelProcess1.lblDTienQuyDoi.setText("---");
        panelProcess1.lbltxtChiPhiThem.setText("---");
        panelProcess1.lbltxtTienHoanThem.setText("---");
        //Thông tin bên hoàn tiền
        panelProcess1.lbltxtTS_SPC.setText("");
        panelProcess1.lbltxtTTongTien.setText("---");
        panelProcess1.lbltxtTPhiHoanTien.setText("---");
        panelProcess1.lbltxtTTongHoanTien.setText("---");

        cboLoaiXuLy.setSelectedIndex(0);
    }
//Hàm chuyển đổi về barcode
private String convertProductIDToBarcode(String productID) {
    if (productID == null || productID.length() < 2) {
        return null;
    }
    String prefix = productID.substring(0, 2);
    String numericPart = productID.substring(2);
    switch (prefix) {
        case "PF":
            return "7" + numericPart;
        case "PM":
            return "8" + numericPart;
        case "PS":
            return "9" + numericPart;
        default:
            return null;
    }
}
//Hàm chuyển đổi ngược lại
private String convertBarcodeToProductID(String barcode) {
    if (barcode == null || barcode.length() < 2) {
        return null;
    }
    char prefix = barcode.charAt(0);
    String numericPart = barcode.substring(1);
    switch (prefix) {
        case '7':
            return "PF" + numericPart;
        case '8':
            return "PM" + numericPart;
        case '9':
            return "PS" + numericPart;
        default:
            return null;
    }
}

//Hàm addRow
private void addRow(JTable table, ArrayList<Product> listProduct, int quantity){
    DecimalFormat df = new DecimalFormat("#,##0.00 VND");
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    model.setRowCount(0);
    int count = 1;
    for (Product o : listProduct){
        model.addRow(new Object[] {count, o.getProductID(), o.getProductName(), });
//        Object[] rowData = {product.getProductID(), product.getProductName(), "Đơn vị", quantity, df.format(product.getSellPrice()), df.format(quantity * product.getSellPrice())};
        count++;
    }
}
    /**
     * Kiểm tra mã sản phẩm có tồn tại trong cột 2 của bảng hay không.
     *
     * @param table      Đối tượng JTable
     * @param productID  Mã sản phẩm cần kiểm tra
     * @return true nếu mã sản phẩm tồn tại, false nếu không
     */
    private boolean isProductExists(JTable table, String productID) {
        int rowCount = table.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            Object value = table.getValueAt(i, 1);
            if (value != null && value.toString().equals(productID)) {
                return true;
            }
        }
        return false;
    }
    public boolean checkProductLíst(String productID, ArrayList<OrderDetails> listOdt){
        for(OrderDetails odt : listOdt){
            if(odt.getProduct().getProductID().equals(productID))
                return false;
        }
        return true;
    }

    //Get tổng tiền đổi trả sản phẩm
    public double getProductListPrice(ArrayList<OrderDetails> list){
        double t = 0;
        for(OrderDetails o : list){
            t += o.getLineTotal();
        }
        return t;
    }
    //Load thông tin tổng quan đổi trả hàng
    public void fillInfoPC(){
        double tienBanDau = getProductListPrice(listOrderConfirm);
        double tienSanPhamDoi = getProductListPrice(listOrderDetailConver);
        panelProcess1.lblDTienBD.setText(currencyFormatter.format(tienBanDau));
        panelProcess1.lblDTienQuyDoi.setText(currencyFormatter.format(tienSanPhamDoi));
        //tiền ban đầu - thuế - tiền sản phẩm quy đổi = số tiền của khách hàng
        double tienThuThem =  tienBanDau - (tienBanDau * 0.01) - tienSanPhamDoi;
        panelProcess1.lbltxtChiPhiThem.setText(tienThuThem>0?currencyFormatter.format(0.0):currencyFormatter.format(tienThuThem * (-1)));
        panelProcess1.lbltxtTienHoanThem.setText(tienThuThem>0?currencyFormatter.format(tienThuThem):currencyFormatter.format(0.0));
    }

}

